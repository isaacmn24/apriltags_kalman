// Generated by gencpp from file uav_msgs/uav_pose.msg
// DO NOT EDIT!


#ifndef UAV_MSGS_MESSAGE_UAV_POSE_H
#define UAV_MSGS_MESSAGE_UAV_POSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace uav_msgs
{
template <class ContainerAllocator>
struct uav_pose_
{
  typedef uav_pose_<ContainerAllocator> Type;

  uav_pose_()
    : header()
    , position()
    , velocity()
    , orientation()
    , covariance()
    , angVelocity()
    , thrust(0.0)
    , flightmode(0)
    , POI()  {
      covariance.assign(0.0);
  }
  uav_pose_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , position(_alloc)
    , velocity(_alloc)
    , orientation(_alloc)
    , covariance()
    , angVelocity(_alloc)
    , thrust(0.0)
    , flightmode(0)
    , POI(_alloc)  {
  (void)_alloc;
      covariance.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;

   typedef boost::array<double, 100>  _covariance_type;
  _covariance_type covariance;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _angVelocity_type;
  _angVelocity_type angVelocity;

   typedef double _thrust_type;
  _thrust_type thrust;

   typedef int32_t _flightmode_type;
  _flightmode_type flightmode;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _POI_type;
  _POI_type POI;





  typedef boost::shared_ptr< ::uav_msgs::uav_pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uav_msgs::uav_pose_<ContainerAllocator> const> ConstPtr;

}; // struct uav_pose_

typedef ::uav_msgs::uav_pose_<std::allocator<void> > uav_pose;

typedef boost::shared_ptr< ::uav_msgs::uav_pose > uav_posePtr;
typedef boost::shared_ptr< ::uav_msgs::uav_pose const> uav_poseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uav_msgs::uav_pose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uav_msgs::uav_pose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uav_msgs::uav_pose_<ContainerAllocator1> & lhs, const ::uav_msgs::uav_pose_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.orientation == rhs.orientation &&
    lhs.covariance == rhs.covariance &&
    lhs.angVelocity == rhs.angVelocity &&
    lhs.thrust == rhs.thrust &&
    lhs.flightmode == rhs.flightmode &&
    lhs.POI == rhs.POI;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uav_msgs::uav_pose_<ContainerAllocator1> & lhs, const ::uav_msgs::uav_pose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uav_msgs::uav_pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uav_msgs::uav_pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_msgs::uav_pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_msgs::uav_pose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_msgs::uav_pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_msgs::uav_pose_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uav_msgs::uav_pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fd14362fea18a862170f6b52a4253b6e";
  }

  static const char* value(const ::uav_msgs::uav_pose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfd14362fea18a862ULL;
  static const uint64_t static_value2 = 0x170f6b52a4253b6eULL;
};

template<class ContainerAllocator>
struct DataType< ::uav_msgs::uav_pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uav_msgs/uav_pose";
  }

  static const char* value(const ::uav_msgs::uav_pose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uav_msgs::uav_pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A representation of 3D position, 3D orientation and 3D velocity and in free space, composed of position and orientation.\n"
"# Point position (north,east,down)\n"
"# Point velocity (north,east,down)\n"
"# Quaternion orientation (x,y,z,w -- 0,0,0,1 = X(front)-> north, Y(right)-> east, Z(bottom))\n"
"# float64[100] covariance diagonal 10x10 matrix, column order: posN,posE,posD,velN,velE,velD,Qx,Qy,Qz,Qw\n"
"# Point rotation (roll,pitch,yaw)\n"
"# float64 thrust (power setting -1 <= thrust <= +1 , negative thrust=engine off)\n"
"# int32 flightmode (TODO: to be defined later)\n"
"# NOTE: To include complete covariance information, a float32[100] Covariance (10x10 matrix) would be needed as well. Transferring that with every update might limit bandwidth significantly.\n"
"\n"
"\n"
"Header header\n"
"geometry_msgs/Point position\n"
"geometry_msgs/Point velocity\n"
"geometry_msgs/Quaternion orientation  \n"
"float64[100] covariance\n"
"geometry_msgs/Point angVelocity\n"
"float64 thrust\n"
"int32 flightmode\n"
"geometry_msgs/Point POI\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::uav_msgs::uav_pose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uav_msgs::uav_pose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.orientation);
      stream.next(m.covariance);
      stream.next(m.angVelocity);
      stream.next(m.thrust);
      stream.next(m.flightmode);
      stream.next(m.POI);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct uav_pose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uav_msgs::uav_pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uav_msgs::uav_pose_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "covariance[]" << std::endl;
    for (size_t i = 0; i < v.covariance.size(); ++i)
    {
      s << indent << "  covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.covariance[i]);
    }
    s << indent << "angVelocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.angVelocity);
    s << indent << "thrust: ";
    Printer<double>::stream(s, indent + "  ", v.thrust);
    s << indent << "flightmode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.flightmode);
    s << indent << "POI: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.POI);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAV_MSGS_MESSAGE_UAV_POSE_H
