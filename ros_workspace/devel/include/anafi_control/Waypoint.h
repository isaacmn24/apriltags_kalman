// Generated by gencpp from file anafi_control/Waypoint.msg
// DO NOT EDIT!


#ifndef ANAFI_CONTROL_MESSAGE_WAYPOINT_H
#define ANAFI_CONTROL_MESSAGE_WAYPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace anafi_control
{
template <class ContainerAllocator>
struct Waypoint_
{
  typedef Waypoint_<ContainerAllocator> Type;

  Waypoint_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , v_x(0.0)
    , v_y(0.0)
    , v_z(0.0)
    , yaw(0.0)  {
    }
  Waypoint_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , v_x(0.0)
    , v_y(0.0)
    , v_z(0.0)
    , yaw(0.0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _v_x_type;
  _v_x_type v_x;

   typedef double _v_y_type;
  _v_y_type v_y;

   typedef double _v_z_type;
  _v_z_type v_z;

   typedef double _yaw_type;
  _yaw_type yaw;





  typedef boost::shared_ptr< ::anafi_control::Waypoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anafi_control::Waypoint_<ContainerAllocator> const> ConstPtr;

}; // struct Waypoint_

typedef ::anafi_control::Waypoint_<std::allocator<void> > Waypoint;

typedef boost::shared_ptr< ::anafi_control::Waypoint > WaypointPtr;
typedef boost::shared_ptr< ::anafi_control::Waypoint const> WaypointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anafi_control::Waypoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anafi_control::Waypoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::anafi_control::Waypoint_<ContainerAllocator1> & lhs, const ::anafi_control::Waypoint_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.v_x == rhs.v_x &&
    lhs.v_y == rhs.v_y &&
    lhs.v_z == rhs.v_z &&
    lhs.yaw == rhs.yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::anafi_control::Waypoint_<ContainerAllocator1> & lhs, const ::anafi_control::Waypoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace anafi_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::anafi_control::Waypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anafi_control::Waypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anafi_control::Waypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anafi_control::Waypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anafi_control::Waypoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anafi_control::Waypoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anafi_control::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c72c4e4d66b8cdce8f9bcb0dbae36dca";
  }

  static const char* value(const ::anafi_control::Waypoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc72c4e4d66b8cdceULL;
  static const uint64_t static_value2 = 0x8f9bcb0dbae36dcaULL;
};

template<class ContainerAllocator>
struct DataType< ::anafi_control::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anafi_control/Waypoint";
  }

  static const char* value(const ::anafi_control::Waypoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anafi_control::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x                      # x-position [m] in world frame\n"
"float64 y                      # y-position [m] in world frame\n"
"float64 z                      # z-position [m] in world frame\n"
"float64 v_x                   # x-velocity [m/s] in world frame\n"
"float64 v_y                   # y-velocity [m/s] in world frame\n"
"float64 v_z                   # z-velocity [m/s] in world frame\n"
"float64 yaw                   # yaw angle [deg] in world frame\n"
;
  }

  static const char* value(const ::anafi_control::Waypoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anafi_control::Waypoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.v_x);
      stream.next(m.v_y);
      stream.next(m.v_z);
      stream.next(m.yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Waypoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anafi_control::Waypoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anafi_control::Waypoint_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "v_x: ";
    Printer<double>::stream(s, indent + "  ", v.v_x);
    s << indent << "v_y: ";
    Printer<double>::stream(s, indent + "  ", v.v_y);
    s << indent << "v_z: ";
    Printer<double>::stream(s, indent + "  ", v.v_z);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANAFI_CONTROL_MESSAGE_WAYPOINT_H
