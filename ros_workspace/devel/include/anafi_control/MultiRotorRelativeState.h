// Generated by gencpp from file anafi_control/MultiRotorRelativeState.msg
// DO NOT EDIT!


#ifndef ANAFI_CONTROL_MESSAGE_MULTIROTORRELATIVESTATE_H
#define ANAFI_CONTROL_MESSAGE_MULTIROTORRELATIVESTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace anafi_control
{
template <class ContainerAllocator>
struct MultiRotorRelativeState_
{
  typedef MultiRotorRelativeState_<ContainerAllocator> Type;

  MultiRotorRelativeState_()
    : header()
    , rel_p_x(0.0)
    , rel_p_y(0.0)
    , rel_p_z(0.0)
    , rel_v_x(0.0)
    , rel_v_y(0.0)
    , rel_v_z(0.0)
    , rel_yaw(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , v_z(0.0)
    , roll_rate(0.0)
    , pitch_rate(0.0)
    , yaw_rate(0.0)  {
    }
  MultiRotorRelativeState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , rel_p_x(0.0)
    , rel_p_y(0.0)
    , rel_p_z(0.0)
    , rel_v_x(0.0)
    , rel_v_y(0.0)
    , rel_v_z(0.0)
    , rel_yaw(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , v_z(0.0)
    , roll_rate(0.0)
    , pitch_rate(0.0)
    , yaw_rate(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _rel_p_x_type;
  _rel_p_x_type rel_p_x;

   typedef double _rel_p_y_type;
  _rel_p_y_type rel_p_y;

   typedef double _rel_p_z_type;
  _rel_p_z_type rel_p_z;

   typedef double _rel_v_x_type;
  _rel_v_x_type rel_v_x;

   typedef double _rel_v_y_type;
  _rel_v_y_type rel_v_y;

   typedef double _rel_v_z_type;
  _rel_v_z_type rel_v_z;

   typedef double _rel_yaw_type;
  _rel_yaw_type rel_yaw;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _v_z_type;
  _v_z_type v_z;

   typedef double _roll_rate_type;
  _roll_rate_type roll_rate;

   typedef double _pitch_rate_type;
  _pitch_rate_type pitch_rate;

   typedef double _yaw_rate_type;
  _yaw_rate_type yaw_rate;





  typedef boost::shared_ptr< ::anafi_control::MultiRotorRelativeState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anafi_control::MultiRotorRelativeState_<ContainerAllocator> const> ConstPtr;

}; // struct MultiRotorRelativeState_

typedef ::anafi_control::MultiRotorRelativeState_<std::allocator<void> > MultiRotorRelativeState;

typedef boost::shared_ptr< ::anafi_control::MultiRotorRelativeState > MultiRotorRelativeStatePtr;
typedef boost::shared_ptr< ::anafi_control::MultiRotorRelativeState const> MultiRotorRelativeStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anafi_control::MultiRotorRelativeState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anafi_control::MultiRotorRelativeState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::anafi_control::MultiRotorRelativeState_<ContainerAllocator1> & lhs, const ::anafi_control::MultiRotorRelativeState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.rel_p_x == rhs.rel_p_x &&
    lhs.rel_p_y == rhs.rel_p_y &&
    lhs.rel_p_z == rhs.rel_p_z &&
    lhs.rel_v_x == rhs.rel_v_x &&
    lhs.rel_v_y == rhs.rel_v_y &&
    lhs.rel_v_z == rhs.rel_v_z &&
    lhs.rel_yaw == rhs.rel_yaw &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.v_z == rhs.v_z &&
    lhs.roll_rate == rhs.roll_rate &&
    lhs.pitch_rate == rhs.pitch_rate &&
    lhs.yaw_rate == rhs.yaw_rate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::anafi_control::MultiRotorRelativeState_<ContainerAllocator1> & lhs, const ::anafi_control::MultiRotorRelativeState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace anafi_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::anafi_control::MultiRotorRelativeState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anafi_control::MultiRotorRelativeState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anafi_control::MultiRotorRelativeState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anafi_control::MultiRotorRelativeState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anafi_control::MultiRotorRelativeState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anafi_control::MultiRotorRelativeState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anafi_control::MultiRotorRelativeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "992f417326c3849f951a20961ff27171";
  }

  static const char* value(const ::anafi_control::MultiRotorRelativeState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x992f417326c3849fULL;
  static const uint64_t static_value2 = 0x951a20961ff27171ULL;
};

template<class ContainerAllocator>
struct DataType< ::anafi_control::MultiRotorRelativeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anafi_control/MultiRotorRelativeState";
  }

  static const char* value(const ::anafi_control::MultiRotorRelativeState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anafi_control::MultiRotorRelativeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64 rel_p_x\n"
"float64 rel_p_y\n"
"float64 rel_p_z\n"
"float64 rel_v_x\n"
"float64 rel_v_y\n"
"float64 rel_v_z\n"
"float64 rel_yaw\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
"float64 v_z\n"
"float64 roll_rate\n"
"float64 pitch_rate\n"
"float64 yaw_rate\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::anafi_control::MultiRotorRelativeState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anafi_control::MultiRotorRelativeState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.rel_p_x);
      stream.next(m.rel_p_y);
      stream.next(m.rel_p_z);
      stream.next(m.rel_v_x);
      stream.next(m.rel_v_y);
      stream.next(m.rel_v_z);
      stream.next(m.rel_yaw);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.v_z);
      stream.next(m.roll_rate);
      stream.next(m.pitch_rate);
      stream.next(m.yaw_rate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MultiRotorRelativeState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anafi_control::MultiRotorRelativeState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anafi_control::MultiRotorRelativeState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "rel_p_x: ";
    Printer<double>::stream(s, indent + "  ", v.rel_p_x);
    s << indent << "rel_p_y: ";
    Printer<double>::stream(s, indent + "  ", v.rel_p_y);
    s << indent << "rel_p_z: ";
    Printer<double>::stream(s, indent + "  ", v.rel_p_z);
    s << indent << "rel_v_x: ";
    Printer<double>::stream(s, indent + "  ", v.rel_v_x);
    s << indent << "rel_v_y: ";
    Printer<double>::stream(s, indent + "  ", v.rel_v_y);
    s << indent << "rel_v_z: ";
    Printer<double>::stream(s, indent + "  ", v.rel_v_z);
    s << indent << "rel_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.rel_yaw);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "v_z: ";
    Printer<double>::stream(s, indent + "  ", v.v_z);
    s << indent << "roll_rate: ";
    Printer<double>::stream(s, indent + "  ", v.roll_rate);
    s << indent << "pitch_rate: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_rate);
    s << indent << "yaw_rate: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_rate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANAFI_CONTROL_MESSAGE_MULTIROTORRELATIVESTATE_H
